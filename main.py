from pyrogram import Client, filters, enums
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from config import Config
from utils.db import db
from utils.helpers import Downloader
import re
import logging
import traceback

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡§∞‡•á‡§Ç
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Client(
    "SFW_DownloadBot",
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    bot_token=Config.BOT_TOKEN
)

downloader = Downloader()
INSTA_REGEX = r'(https?://)?(www\.)?instagram\.com/(reel|p|tv)/[a-zA-Z0-9_-]+/?(\?.*)?'

# ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§Æ‡§æ‡§Ç‡§°
@app.on_message(filters.command("start") & filters.private)
async def start(client: Client, message: Message):
    try:
        user = message.from_user
        await db.add_user(user.id, user.username or user.first_name)
        await message.reply_text(
            "üé¨ **Instagram Video Downloader**\n\n"
            "‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä Instagram Reel/Post ‡§ï‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡•á‡§Ç, ‡§Æ‡•à‡§Ç ‡§â‡§∏‡•á ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§¶‡•Ç‡§Å‡§ó‡§æ!\n\n"
            "‚ö†Ô∏è **‡§®‡•ã‡§ü:** ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§ï‡•á ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ó‡•ç‡§∞‡•Å‡§™", url=Config.SUPPORT_GROUP_URL)
            ]])
        )
    except Exception as e:
        logger.error(f"Start Error: {traceback.format_exc()}")

# ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç‡§°‡§≤‡§∞
@app.on_message(filters.text & (filters.group | filters.private))
async def handle_messages(client: Client, message: Message):
    try:
        # ‡§∏‡§ø‡§∞‡•ç‡§´ Instagram ‡§≤‡§ø‡§Ç‡§ï ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡•á‡§Ç
        if not re.match(INSTA_REGEX, message.text):
            return

        # ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§Æ‡•á‡§Ç mention/reply ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç
        if message.chat.type == enums.ChatType.GROUP:
            if not (message.text.startswith("@" + Config.BOT_USERNAME) and 
                   not (message.reply_to_message and message.reply_to_message.from_user.is_self)):
                return

        await message.reply_chat_action(enums.ChatAction.UPLOAD_VIDEO)
        user = message.from_user

        # ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
        video_path = await downloader.download_media(message.text)
        
        # ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≠‡•á‡§ú‡•á‡§Ç
        await message.reply_video(
            video=video_path,
            caption=f"üì• Downloaded via @{Config.BOT_USERNAME}",
            reply_to_message_id=message.id if message.chat.type != enums.ChatType.PRIVATE else None
        )

        # ‡§ï‡•ç‡§≤‡•Ä‡§®‡§Ö‡§™ ‡§î‡§∞ ‡§≤‡•â‡§ó
        os.remove(video_path)
        await db.log_usage(user.id)

    except Exception as e:
        error_msg = f"‚ùå Error: {str(e)}\n\n{traceback.format_exc()}"
        logger.error(error_msg)
        await message.reply_text("‚ö†Ô∏è ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§Ö‡§∏‡§´‡§≤! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≤‡§ø‡§Ç‡§ï ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç")

if __name__ == "__main__":
    logger.info("Bot Started!")
    app.run()
